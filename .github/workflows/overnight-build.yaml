name: "Overnight build"

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write

env:
  APP: "skeleton-application-frontend"
  OWNER: "seanmcguigan"
  REPO: "poker-app"

jobs:
  short_sha:
    outputs: 
      current_short_sha: ${{ steps.short_sha.outputs.short_sha }}
      previous_release_tag: ${{ steps.prod_tag.outputs.prod_tag }}
      new_release_tag: ${{ steps.calculate_prod_tag.outputs.new_prod_tag }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - name: get current commit sha @main
        id: short_sha
        run: |
          short_sha=$(git rev-parse --short ${{ github.sha }})
          echo "short_sha=$short_sha" >> $GITHUB_OUTPUT

      - name: get previous release tag
        id: prod_tag
        run: |
          prod_tag=$(gh release view --json tagName | jq --raw-output .tagName)
          echo "prod_tag=$prod_tag" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: increment tag version for next release
        id: calculate_prod_tag
        run: |
          new_prod_tag="${{ env.APP }}-${{ steps.short_sha.outputs.short_sha }}-${{ github.run_number }}"
          echo "new_prod_tag=$new_prod_tag" >> $GITHUB_OUTPUT
      
      # always tags the latest master with the next incremental release tag.
      - name: tag latest
        uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: ${{ steps.calculate_prod_tag.outputs.new_prod_tag }}
          force_push_tag: true
        env:
          GH_TOKEN: ${{ github.token }}

      - name: echo
        run: | 
          echo "Output short sha ${{ steps.short_sha.outputs.short_sha }}"
          echo "Output current release tag ${{ steps.prod_tag.outputs.prod_tag }}"
          echo "Output new release tag ${{ steps.calculate_prod_tag.outputs.new_prod_tag }}"
  
  release:
    needs: short_sha
    name: draft release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: env
        run: |
          echo "The recorded short commit sha ${{ needs.short_sha.outputs.current_short_sha }}"
          echo "The current prod release tag ${{ needs.short_sha.outputs.previous_release_tag }}"
          echo "The new prod release tag ${{ needs.short_sha.outputs.new_release_tag }}"

      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      # Close existing draft releases
      - name: delete draft releases
        run: |
          for RELEASE_ID in $(gh api -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$OWNER/$REPO/releases \
            | jq --raw-output '.[] | select(.draft==true) | .id')
          do 
            echo deleting draft $RELEASE_ID
            gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$OWNER/$REPO/releases/$RELEASE_ID 
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # # Create a release draft      
      # - name: create new draft release
      #   run: |
      #     gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
      #     /repos/$OWNER/$REPO/releases \
      #     -f tag_name=${{ needs.short_sha.outputs.new_release_tag }} \
      #     -f target_commitish='main' \
      #     -f name=${{ needs.short_sha.outputs.new_release_tag }} \
      #     -F draft=true \
      #     -F prerelease=false \
      #     -F generate_release_notes=false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Create draft release notes      
      - name: create draft release notes
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/$OWNER/$REPO/releases/generate-notes \
          -f tag_name=${{ needs.short_sha.outputs.new_release_tag }} \
          -f target_commitish='main' \
          -f previous_tag_name=${{ needs.short_sha.outputs.previous_release_tag }} \
          -f configuration_file_path='.github/release.yml'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a release draft      
      - name: create new draft release
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/$OWNER/$REPO/releases \
          -f tag_name=${{ needs.short_sha.outputs.new_release_tag }} \
          -f target_commitish='main' \
          -f name=${{ needs.short_sha.outputs.new_release_tag }} \
          -F draft=true \
          -F prerelease=false \
          -F generate_release_notes=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Check latest staging docker image tag matches the draft github tag.
#      - name: verify tags