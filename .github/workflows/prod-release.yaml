name: "Prod-Release"

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  APP: "skeleton-application-frontend"
  AWS_REGION: "eu-west-1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker_tag:
    name: Docker tag for production and push to ECR.
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: |
          date=$(date +%Y%m%d%H%M%S)
          echo date=$date >> $GITHUB_OUTPUT

      - name: Target release sha
        id: release_sha
        run: |
          release_sha=$(echo ${{ vars.LATEST_PRE_PROD_IMAGE_TAG }} | grep -Eow "([a-f0-9]{7})")
          echo release_sha=$release_sha >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ECR login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Outputs
        run: |
          echo sha: ${{ steps.release_sha.outputs.release_sha }}
          echo date ${{ steps.date.outputs.date }}
          echo pre-prod tag: ${{ vars.LATEST_PRE_PROD_IMAGE_TAG }}

      - name: ECR prod tag
        uses: abronin/ecr-retag-action@v1
        env:
          LATEST_PRE_PROD_IMAGE_TAG: ${{ vars.LATEST_PRE_PROD_IMAGE_TAG }}
        with:
          repository: "futrli/${{ env.APP }}" # "${{ env.OWNER }}/${{ env.APP }}"
          tag: ${{ env.LATEST_PRE_PROD_IMAGE_TAG }}
          new-tags: "prod-${{ steps.release_sha.outputs.release_sha }}-${{ steps.date.outputs.date }}"

  # wait_for_deployment:
  #   needs: [docker_tag]
  #   name: Wait for flux to deploy.
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - name: wait 
  #       name: deploy
  #       needs: [confirm_deployment]

  wait_for_deployment:
    needs: [docker_tag]
    uses: ./.github/workflows/confirm-deployment.yaml
  
  deploy:
    name: deploy
    needs: [wait_for_deployment]  # require wait_for_deployment workflow to pass before deploy runs
    timeout-minutes: 10
    steps:
      - name: Application deployed
        run: |
          echo "app deployed"

# github dispatches flux
# trigger confirm-deployment workflow to succeed with timeout